"use strict";
// This code is a modification of the version form SDK:
// https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-resources/src/platform/node/detect-resources.ts
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectSyncResources = void 0;
const api_1 = require("@opentelemetry/api");
const resources_1 = require("@opentelemetry/resources");
const util = __importStar(require("util"));
/**
 * Runs all SYNC resource detectors and returns the results merged into a single
 * Resource.
 *
 * @param config Configuration for resource detection
 */
const detectSyncResources = (config = {}) => {
    const internalConfig = Object.assign(config);
    const resources = (internalConfig.detectors || []).map((d) => {
        try {
            const resource = d.detect();
            api_1.diag.debug(`${d.constructor.name} found resource.`, resource);
            return resource;
        }
        catch (e) {
            api_1.diag.debug(`${d.constructor.name} failed: ${e.message}`);
            return resources_1.Resource.empty();
        }
    });
    // Future check if verbose logging is enabled issue #1903
    logResources(resources);
    return resources.reduce((acc, resource) => acc.merge(resource), resources_1.Resource.empty());
};
exports.detectSyncResources = detectSyncResources;
/**
 * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.
 *
 * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.
 */
const logResources = (resources) => {
    resources.forEach((resource) => {
        // Print only populated resources
        if (Object.keys(resource.attributes).length > 0) {
            const resourceDebugString = util.inspect(resource.attributes, {
                depth: 2,
                breakLength: Infinity,
                sorted: true,
                compact: false,
            });
            api_1.diag.verbose(resourceDebugString);
        }
    });
};
//# sourceMappingURL=detect-sync-resources.js.map