"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serviceDetector = exports.serviceSyncDetector = void 0;
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const resources_1 = require("@opentelemetry/resources");
const opentelemetry_resource_detector_sync_api_1 = require("opentelemetry-resource-detector-sync-api");
const uuid_1 = require("uuid");
const fs = __importStar(require("fs"));
// set as global to make sure it's the same on any invocation even for multiple
// instances of ServiceSyncDetector
const instanceId = uuid_1.v4();
class ServiceSyncDetector {
    detect() {
        const packageJson = this.loadJsonFile('package.json');
        const attributes = {
            [semantic_conventions_1.SemanticResourceAttributes.SERVICE_INSTANCE_ID]: instanceId,
            [semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME]: this.getServiceName(packageJson),
        };
        const serviceVersion = packageJson === null || packageJson === void 0 ? void 0 : packageJson.version;
        if (serviceVersion) {
            attributes[semantic_conventions_1.SemanticResourceAttributes.SERVICE_VERSION] = serviceVersion;
        }
        return new resources_1.Resource(attributes);
    }
    getServiceName(packageJson) {
        const fromEnv = process.env.OTEL_SERVICE_NAME;
        if (fromEnv)
            return fromEnv;
        const fromPackageJson = packageJson === null || packageJson === void 0 ? void 0 : packageJson.name;
        if (fromPackageJson)
            return fromPackageJson;
        return resources_1.defaultServiceName();
    }
    loadJsonFile(path) {
        try {
            return JSON.parse(fs.readFileSync(path).toString());
        }
        catch (err) {
            return null;
        }
    }
}
exports.serviceSyncDetector = new ServiceSyncDetector();
exports.serviceDetector = opentelemetry_resource_detector_sync_api_1.syncDetectorToDetector(exports.serviceSyncDetector);
//# sourceMappingURL=service.js.map