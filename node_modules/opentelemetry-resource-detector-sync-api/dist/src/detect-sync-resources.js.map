{"version":3,"file":"detect-sync-resources.js","sourceRoot":"","sources":["../../src/detect-sync-resources.ts"],"names":[],"mappings":";AAAA,uDAAuD;AACvD,sIAAsI;;;;;;;;;;;;;;;;;;;;;;AAEtI,4CAA0C;AAC1C,wDAAoD;AAEpD,2CAA6B;AAE7B;;;;;GAKG;AACI,MAAM,mBAAmB,GAAG,CAAC,SAAsC,EAAE,EAAY,EAAE;IACtF,MAAM,cAAc,GAAgC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAE1E,MAAM,SAAS,GAAoB,CAAC,cAAc,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QAC1E,IAAI;YACA,MAAM,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;YAC5B,UAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI,kBAAkB,EAAE,QAAQ,CAAC,CAAC;YAC9D,OAAO,QAAQ,CAAC;SACnB;QAAC,OAAO,CAAC,EAAE;YACR,UAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;YACzD,OAAO,oBAAQ,CAAC,KAAK,EAAE,CAAC;SAC3B;IACL,CAAC,CAAC,CAAC;IAEH,yDAAyD;IACzD,YAAY,CAAC,SAAS,CAAC,CAAC;IAExB,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,QAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,oBAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;AACtF,CAAC,CAAC;AAlBW,QAAA,mBAAmB,uBAkB9B;AAEF;;;;GAIG;AACH,MAAM,YAAY,GAAG,CAAC,SAA0B,EAAE,EAAE;IAChD,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;QAC3B,iCAAiC;QACjC,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7C,MAAM,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE;gBAC1D,KAAK,EAAE,CAAC;gBACR,WAAW,EAAE,QAAQ;gBACrB,MAAM,EAAE,IAAI;gBACZ,OAAO,EAAE,KAAK;aACjB,CAAC,CAAC;YACH,UAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;SACrC;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["// This code is a modification of the version form SDK:\n// https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-resources/src/platform/node/detect-resources.ts\n\nimport { diag } from '@opentelemetry/api';\nimport { Resource } from '@opentelemetry/resources';\nimport { ResourceSyncDetectionConfig } from './config';\nimport * as util from 'util';\n\n/**\n * Runs all SYNC resource detectors and returns the results merged into a single\n * Resource.\n *\n * @param config Configuration for resource detection\n */\nexport const detectSyncResources = (config: ResourceSyncDetectionConfig = {}): Resource => {\n    const internalConfig: ResourceSyncDetectionConfig = Object.assign(config);\n\n    const resources: Array<Resource> = (internalConfig.detectors || []).map((d) => {\n        try {\n            const resource = d.detect();\n            diag.debug(`${d.constructor.name} found resource.`, resource);\n            return resource;\n        } catch (e) {\n            diag.debug(`${d.constructor.name} failed: ${e.message}`);\n            return Resource.empty();\n        }\n    });\n\n    // Future check if verbose logging is enabled issue #1903\n    logResources(resources);\n\n    return resources.reduce((acc, resource) => acc.merge(resource), Resource.empty());\n};\n\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\nconst logResources = (resources: Array<Resource>) => {\n    resources.forEach((resource) => {\n        // Print only populated resources\n        if (Object.keys(resource.attributes).length > 0) {\n            const resourceDebugString = util.inspect(resource.attributes, {\n                depth: 2,\n                breakLength: Infinity,\n                sorted: true,\n                compact: false,\n            });\n            diag.verbose(resourceDebugString);\n        }\n    });\n};\n"]}