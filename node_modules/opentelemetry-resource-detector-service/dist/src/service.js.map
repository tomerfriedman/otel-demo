{"version":3,"file":"service.js","sourceRoot":"","sources":["../../src/service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,8EAAiF;AACjF,wDAA4F;AAC5F,uGAAgG;AAChG,+BAAoC;AACpC,uCAAyB;AAEzB,+EAA+E;AAC/E,mCAAmC;AACnC,MAAM,UAAU,GAAG,SAAM,EAAE,CAAC;AAE5B,MAAM,mBAAmB;IACrB,MAAM;QACF,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QACtD,MAAM,UAAU,GAAuB;YACnC,CAAC,iDAA0B,CAAC,mBAAmB,CAAC,EAAE,UAAU;YAC5D,CAAC,iDAA0B,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;SAC9E,CAAC;QACF,MAAM,cAAc,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,CAAC;QAC5C,IAAI,cAAc,EAAE;YAChB,UAAU,CAAC,iDAA0B,CAAC,eAAe,CAAC,GAAG,cAAc,CAAC;SAC3E;QACD,OAAO,IAAI,oBAAQ,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;IAED,cAAc,CAAC,WAAgB;QAC3B,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;QAC9C,IAAI,OAAO;YAAE,OAAO,OAAO,CAAC;QAE5B,MAAM,eAAe,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,CAAC;QAC1C,IAAI,eAAe;YAAE,OAAO,eAAe,CAAC;QAE5C,OAAO,8BAAkB,EAAE,CAAC;IAChC,CAAC;IAED,YAAY,CAAC,IAAY;QACrB,IAAI;YACA,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SACvD;QAAC,OAAO,GAAG,EAAE;YACV,OAAO,IAAI,CAAC;SACf;IACL,CAAC;CACJ;AAEY,QAAA,mBAAmB,GAAG,IAAI,mBAAmB,EAAE,CAAC;AAChD,QAAA,eAAe,GAAG,iEAAsB,CAAC,2BAAmB,CAAC,CAAC","sourcesContent":["import { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource, defaultServiceName, ResourceAttributes } from '@opentelemetry/resources';\nimport { SyncDetector, syncDetectorToDetector } from 'opentelemetry-resource-detector-sync-api';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as fs from 'fs';\n\n// set as global to make sure it's the same on any invocation even for multiple\n// instances of ServiceSyncDetector\nconst instanceId = uuidv4();\n\nclass ServiceSyncDetector implements SyncDetector {\n    detect(): Resource {\n        const packageJson = this.loadJsonFile('package.json');\n        const attributes: ResourceAttributes = {\n            [SemanticResourceAttributes.SERVICE_INSTANCE_ID]: instanceId,\n            [SemanticResourceAttributes.SERVICE_NAME]: this.getServiceName(packageJson),\n        };\n        const serviceVersion = packageJson?.version;\n        if (serviceVersion) {\n            attributes[SemanticResourceAttributes.SERVICE_VERSION] = serviceVersion;\n        }\n        return new Resource(attributes);\n    }\n\n    getServiceName(packageJson: any): string {\n        const fromEnv = process.env.OTEL_SERVICE_NAME;\n        if (fromEnv) return fromEnv;\n\n        const fromPackageJson = packageJson?.name;\n        if (fromPackageJson) return fromPackageJson;\n\n        return defaultServiceName();\n    }\n\n    loadJsonFile(path: string): any {\n        try {\n            return JSON.parse(fs.readFileSync(path).toString());\n        } catch (err) {\n            return null;\n        }\n    }\n}\n\nexport const serviceSyncDetector = new ServiceSyncDetector();\nexport const serviceDetector = syncDetectorToDetector(serviceSyncDetector);\n"]}